1、标记-清除算法
	最基础的收集算法是“标记-清除”算法，算法分为“标记”和“清除”两个阶段；首先标记出所有需要回收的对象，在标记完成后统一
	回收掉所有被标记的对象。它的主要缺点有两个：一个是效率问题，标记和清除过程的效率都不高；另一个是空间问题，标记清除
	之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存
	而不得不提前触发另一次垃圾收集动作。
	
2、复制算法
	为了解决效率问题，一种称为“复制”的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中一块。
	当这块的内存用完了，就将还存活着的对象复制到另一块上面，然后再把以使用过的内存空间一次清理掉。这样使得没测都是
	对其中一块内存进行回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，
	运行高效，只是这种算法的代价是将内存缩小为原来的一班，代价未免太高。
	新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间
	和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中
	还存活着的对象一次性地拷贝到另一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor的空间。
	HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是每次新生代中可用内存空间为整个新生代容量的
	90%（80%+10%），只有10%的内存会被“浪费”的。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证
	每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（老生代）进行分配担保。
	
3、标记-整理算法
	根据老生代特点，有人提出了另一种“标记-整理”算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可
回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。

4、分代收集算法
	当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法并没有什么新的思想，只是根据对象的存活周期的不同将内存分为
几块。一般是把java堆分为新生代和老生代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时
都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象
存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。